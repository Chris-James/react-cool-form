[{"/Users/welly/Desktop/react-cool-form/examples/src/index.tsx":"1","/Users/welly/Desktop/react-cool-form/examples/src/App/index.tsx":"2","/Users/welly/Desktop/react-cool-form/examples/src/App/styles.ts":"3","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/index.tsx":"4","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/styles.ts":"5","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/Input.tsx":"6","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/Controller.tsx":"7","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/TextArea.tsx":"8","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/Select.tsx":"9"},{"size":195,"mtime":1606135309914,"results":"10","hashOfConfig":"11"},{"size":310,"mtime":1606135242476,"results":"12","hashOfConfig":"11"},{"size":176,"mtime":1605516112485,"results":"13","hashOfConfig":"11"},{"size":10452,"mtime":1606137281192,"results":"14","hashOfConfig":"11"},{"size":436,"mtime":1605516112488,"results":"15","hashOfConfig":"11"},{"size":501,"mtime":1606135271430,"results":"16","hashOfConfig":"11"},{"size":1343,"mtime":1606135257901,"results":"17","hashOfConfig":"11"},{"size":494,"mtime":1606135279341,"results":"18","hashOfConfig":"11"},{"size":537,"mtime":1606135274771,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"xqrozs",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/welly/Desktop/react-cool-form/examples/src/index.tsx",[],["41","42","43","44","45","46"],"/Users/welly/Desktop/react-cool-form/examples/src/App/index.tsx",[],"/Users/welly/Desktop/react-cool-form/examples/src/App/styles.ts",[],"/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/index.tsx",["47","48","49","50","51","52","53","54","55","56","57","58","59","60"],"/** @jsxImportSource @emotion/react */\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useForm, get, set } from \"react-cool-form\";\nimport * as Yup from \"yup\";\n\nimport Input from \"./Input\";\nimport Controller from \"./Controller\";\nimport Select from \"./Select\";\nimport TextArea from \"./TextArea\";\nimport { container, form, wrapper } from \"./styles\";\n\nconst fib = (n: number): number => (n < 3 ? 1 : fib(n - 2) + fib(n - 1));\n\nexport interface FormValues {\n  text?: Record<string, string>;\n  controller1?: any;\n  controller2: any;\n  dynamicText1?: string;\n  dynamicText2: string;\n  password: string;\n  number: number;\n  range: number;\n  checkbox: boolean;\n  checkboxGroup: string[];\n  radio: string;\n  image: any;\n  select: string;\n  multiSelect: Record<string, string[]>;\n  textarea: string;\n}\n\nconst defaultValues = {\n  // text: { nest: \"new test\" },\n  controller1: \"new test\",\n  controller2: \"new test\",\n  // dynamicText1: \"new test\",\n  dynamicText2: \"new test\",\n  password: \"new test\",\n  number: 5,\n  range: 0,\n  checkbox: true,\n  checkboxGroup: [\"value-1\"],\n  radio: \"value-1\",\n  image: [],\n  select: \"value-2\",\n  multiSelect: { nest: [\"value-1\", \"value-2\"] },\n  textarea: \"test\",\n};\n\nconst schema = Yup.object().shape({\n  text: Yup.object()\n    .shape({\n      nest: Yup.string().required(),\n    })\n    .required(),\n  number: Yup.number().min(100).required(),\n});\n\nexport default (): JSX.Element => {\n  const [show1, setShow1] = useState(true);\n  const [show2, setShow2] = useState(true);\n  const {\n    formRef,\n    validate,\n    getState,\n    setValues,\n    setFieldValue,\n    setErrors,\n    setFieldError,\n    validateField,\n    validateForm,\n    controller,\n    reset,\n    submit,\n  } = useForm<FormValues>({\n    defaultValues,\n    // validateOnChange: false,\n    // validateOnBlur: false,\n    // iControlFields: [\"text.nest\", \"number\"],\n    // excludeFields: [\"text.nest\", \"controller1\", \"controller2\"],\n    // validate: async (values) => {\n    //   let errors: any = { text: { nest: \"\" } };\n\n    //   // fib(40);\n\n    //   // eslint-disable-next-line\n    //   await new Promise((resolve) => {\n    //     setTimeout(resolve, 3000);\n    //   });\n\n    //   // if (text.nest.length <= 3) set(errors, \"text.nest\", \"Form error\");\n    //   if (values.text.nest.length <= 5) {\n    //     errors.text.nest = \"Form error\";\n    //   } else {\n    //     errors = {};\n    //   }\n    //   // if (hiddenText.length <= 3) errors.hiddenText = \"Form error\";\n\n    //   // throw new Error(\"Fake error\");\n    //   return errors;\n\n    //   /* try {\n    //     await schema.validate(values, { abortEarly: false });\n    //   } catch (error) {\n    //     const formErrors = {};\n\n    //     error.inner.forEach(({ path, message }: any) =>\n    //       set(formErrors, path, message)\n    //     );\n\n    //     return formErrors;\n    //   } */\n    // },\n    onReset: (values, options, e) =>\n      console.log(\"LOG ===> onReset: \", values, options, e),\n    onSubmit: async (values, options, e) => {\n      // eslint-disable-next-line\n      /* await new Promise((resolve) => {\n        setTimeout(resolve, 3000);\n      }); */\n\n      console.log(\"LOG ===> onSubmit: \", values);\n    },\n    onError: (errors, options, e) =>\n      console.log(\"LOG ===> onError: \", errors, options, e),\n    // debug: (formState) => console.log(\"LOG ===> debug: \", formState),\n  });\n\n  // console.log(\"LOG ===> Re-render\");\n  /* console.log(\n    \"LOG ===> \",\n    getState([\n      \"values.controller1\",\n      \"errors.controller1\",\n      \"dirtyFields.controller1\",\n    ])\n  ); */\n  // console.log(\"LOG ===> \", getState(\"values.dynamicText1\"));\n  console.log(\n    \"LOG ===> formState: \",\n    getState({\n      // values: \"values\",\n      // errors: \"errors\",\n      // touched: \"touched\",\n      // isDirty: \"isDirty\",\n      // dirtyFields: \"dirtyFields\",\n      // isValidating: \"isValidating\",\n      // isValid: \"isValid\",\n      isSubmitting: \"isSubmitting\",\n      isSubmitted: \"isSubmitted\",\n      submitCount: \"submitCount\",\n    })\n  );\n  // const [errors, touched] = getState([\"errors\", \"touched\"]);\n\n  useEffect(() => {\n    // validateField(\"text.nest\");\n    // validateForm();\n  }, []);\n\n  const handleToggle1Click = (): void => setShow1(!show1);\n\n  const handleToggle2Click = (): void => setShow2(!show2);\n\n  const handleSetValueClick = (): void => {\n    /* setValues(\n      (prevValues) => ({\n        ...prevValues,\n        text: { nest: \"new test\" },\n        number: 123,\n      }),\n      {\n        touchedFields: [\"text.nest\"],\n        dirtyFields: [\"text.nest\"],\n      }\n    ); */\n\n    // setFieldValue(\"text.nest\", (prevValue: string) => `new ${prevValue}`);\n    // setFieldValue(\"text.nest\", \"new test\");\n    // setFieldValue(\"hiddenText\", \"new test\");\n    // setFieldValue(\"password\", \"\");\n    // setFieldValue(\"number\", 456);\n    // setFieldValue(\"checkbox\", false);\n    // setFieldValue(\"checkboxGroup\", [\"value-2\"]);\n    // setFieldValue(\"radio\", \"value-2\");\n    // setFieldValue(\"multiSelect.nest\", [\"value-2\"]);\n    setFieldValue(\"password\", \"12345678\");\n  };\n\n  const handleSetErrorsClick = (): void => {\n    setFieldError(\"number\", \"Error\");\n    // setFieldError(\"text.nest\", \"Required\");\n    // setFieldError(\"hiddenText\", (prevMsg) => `new ${prevMsg}`);\n  };\n\n  const handleClearErrorsClick = (): void => {\n    setFieldError(\"password\");\n  };\n\n  const handleValidateClick = (): void => {\n    validateField(\"text.nest\");\n  };\n\n  const handleResetClick = (): void => {\n    /* reset((prevValues) => ({ ...prevValues, text: { nest: \"test reset\" } }), [\n      \"touched\",\n      \"submitCount\",\n    ]); */\n\n    reset();\n  };\n\n  const handleSubmit = async () => {\n    const res = await submit();\n    console.log(\"LOG ===> \", res);\n  };\n\n  return (\n    <div css={container}>\n      <form css={form} noValidate ref={formRef}>\n        {show1 && (\n          <Input\n            label=\"Text:\"\n            name=\"text.nest\"\n            /* ref={validate(async (value) => {\n              // eslint-disable-next-line\n              // await new Promise((resolve) => setTimeout(resolve, 1000));\n              return value.length <= 5 ? \"Field error\" : \"\";\n            })} */\n            required\n            // data-icf\n            defaultValue=\"test\"\n          />\n        )}\n        {/* {touched.text?.nest && errors.text?.nest && <p>{errors.text?.nest}</p>} */}\n        {show2 && (\n          <Input\n            label=\"Controller 1:\"\n            {...controller(\"controller1\", {\n              defaultValue: \"test\",\n              /* validate: async (val) => {\n              return val.length <= 5 ? \"Field error\" : \"\";\n            }, */\n            })}\n            required\n            // defaultChecked\n          />\n        )}\n        <Controller\n          label=\"Controller 2:\"\n          name=\"controller2\"\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          controller={controller}\n          /* validate={useCallback(async (val, values) => {\n            // eslint-disable-next-line\n            // await new Promise((resolve) => setTimeout(resolve, 1000));\n            // console.log(\"LOG ===> validate: \", val, values);\n            return val.length <= 5 ? \"Field error\" : \"\";\n          }, [])} */\n          // required\n          defaultValue={defaultValues.controller2}\n        />\n        <div>\n          <Input\n            label=\"Dynamic Text 1:\"\n            name=\"dynamicText1\"\n            defaultValue=\"test\"\n          />\n        </div>\n        <div>\n          <Input\n            label=\"Dynamic Text 2:\"\n            name=\"dynamicText2\"\n            defaultValue=\"test\"\n          />\n        </div>\n        <Input\n          label=\"Password:\"\n          type=\"password\"\n          name=\"password\"\n          required\n          minLength={8}\n          // defaultValue=\"test\"\n        />\n        {/* {touched.password && errors.password && <p>{errors.password}</p>} */}\n        <Input label=\"Number:\" type=\"number\" name=\"number\" />\n        <Input label=\"Range:\" type=\"range\" name=\"range\" />\n        <Input\n          label=\"Checkbox:\"\n          type=\"checkbox\"\n          name=\"checkbox\"\n          // defaultChecked\n        />\n        <div css={wrapper}>\n          <Input\n            id=\"checkboxGroup-1\"\n            label=\"Checkbox 1:\"\n            type=\"checkbox\"\n            name=\"checkboxGroup\"\n            value=\"value-1\"\n            // defaultChecked\n          />\n          <Input\n            id=\"checkboxGroup-2\"\n            label=\"Checkbox 2:\"\n            type=\"checkbox\"\n            name=\"checkboxGroup\"\n            value=\"value-2\"\n            // defaultChecked\n          />\n        </div>\n        <div css={wrapper}>\n          <Input\n            id=\"radio-1\"\n            label=\"Radio 1:\"\n            type=\"radio\"\n            name=\"radio\"\n            value=\"value-1\"\n          />\n          <Input\n            id=\"radio-2\"\n            label=\"Radio 2:\"\n            type=\"radio\"\n            name=\"radio\"\n            value=\"value-2\"\n            // defaultChecked\n          />\n        </div>\n        <Input label=\"File:\" type=\"file\" name=\"image\" />\n        <Select label=\"Select:\" name=\"select\">\n          <option value=\"value-1\">Value 1</option>\n          <option value=\"value-2\">Value 2</option>\n        </Select>\n        <Select\n          label=\"Multi-select:\"\n          name=\"multiSelect.nest\"\n          multiple\n          defaultValue={[\"value-1\", \"value-2\"]}\n        >\n          <option value=\"value-1\">Value 1</option>\n          <option value=\"value-2\">Value 2</option>\n        </Select>\n        <TextArea label=\"Text Area:\" name=\"textarea\" />\n        <button type=\"button\" onClick={handleToggle1Click}>\n          Toggle 1\n        </button>\n        <button type=\"button\" onClick={handleToggle2Click}>\n          Toggle 2\n        </button>\n        <button type=\"button\" onClick={handleSetValueClick}>\n          Set Values\n        </button>\n        <button type=\"button\" onClick={handleSetErrorsClick}>\n          Set Errors\n        </button>\n        <button type=\"button\" onClick={handleClearErrorsClick}>\n          Clear Errors\n        </button>\n        <button type=\"button\" onClick={handleValidateClick}>\n          Validate\n        </button>\n        <button type=\"button\" onClick={handleResetClick}>\n          Reset\n        </button>\n        <button type=\"button\" onClick={handleSubmit}>\n          My Submit\n        </button>\n        <input type=\"submit\" />\n        <input type=\"reset\" onClick={(e) => reset(null, null, e)} />\n      </form>\n    </div>\n  );\n};\n","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/styles.ts",[],"/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/Input.tsx",[],"/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/Controller.tsx",["61"],"import { ChangeEvent, memo, useState } from \"react\";\nimport {\n  Controller as ControllerType,\n  Parser,\n  FieldValidator,\n} from \"react-cool-form\";\n\nimport { FormValues } from \".\";\n\nimport Input from \"./Input\";\n\ninterface Props {\n  label: string;\n  name: string;\n  type?: string;\n  defaultValue: any;\n  controller: ControllerType<FormValues, ChangeEvent<HTMLInputElement>>;\n  validate?: FieldValidator<FormValues>;\n  [k: string]: any;\n}\n\nconst Controller = ({\n  label,\n  name,\n  type,\n  defaultValue,\n  controller,\n  validate,\n  ...rest\n}: Props) => {\n  // console.log(`LOG ==> ${name} is re-rendered`);\n\n  const [value, setValue] = useState(defaultValue);\n  const parser: Parser<ChangeEvent<HTMLInputElement>> = (e) =>\n    e.target.value.length % 2 ? \"case 1\" : \"case 2\";\n\n  return (\n    <Input\n      label={label}\n      type={type}\n      {...controller(name, {\n        validate,\n        value,\n        defaultValue: \"welly\",\n        // parser,\n        onChange: (e, val) => {\n          setValue(val);\n          // setValue(e.target.value);\n          // console.log(\"LOG ===> onChange: \", val);\n        },\n        onBlur: (e) => {\n          // console.log(\"LOG ===> onBlur: \", e);\n        },\n      })}\n      {...rest}\n    />\n  );\n};\n\nController.defaultProps = {\n  type: undefined,\n  validate: () => null,\n};\n\nexport default memo(Controller);\n","/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/TextArea.tsx",[],"/Users/welly/Desktop/react-cool-form/examples/src/BasicForm/Select.tsx",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":3,"column":31,"nodeType":"76","messageId":"77","endLine":3,"endColumn":42},{"ruleId":"74","severity":1,"message":"78","line":4,"column":19,"nodeType":"76","messageId":"77","endLine":4,"endColumn":22},{"ruleId":"74","severity":1,"message":"79","line":4,"column":24,"nodeType":"76","messageId":"77","endLine":4,"endColumn":27},{"ruleId":"74","severity":1,"message":"80","line":13,"column":62,"nodeType":"76","messageId":"77","endLine":13,"endColumn":65},{"ruleId":"74","severity":1,"message":"81","line":51,"column":7,"nodeType":"76","messageId":"77","endLine":51,"endColumn":13},{"ruleId":"74","severity":1,"message":"82","line":65,"column":5,"nodeType":"76","messageId":"77","endLine":65,"endColumn":13},{"ruleId":"74","severity":1,"message":"83","line":67,"column":5,"nodeType":"76","messageId":"77","endLine":67,"endColumn":14},{"ruleId":"74","severity":1,"message":"84","line":69,"column":5,"nodeType":"76","messageId":"77","endLine":69,"endColumn":14},{"ruleId":"74","severity":1,"message":"85","line":72,"column":5,"nodeType":"76","messageId":"77","endLine":72,"endColumn":17},{"ruleId":"86","severity":1,"message":"87","line":116,"column":7,"nodeType":"88","messageId":"89","endLine":116,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":123,"column":7,"nodeType":"88","messageId":"89","endLine":123,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":126,"column":7,"nodeType":"88","messageId":"89","endLine":126,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":140,"column":3,"nodeType":"88","messageId":"89","endLine":140,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":216,"column":5,"nodeType":"88","messageId":"89","endLine":216,"endColumn":16},{"ruleId":"74","severity":1,"message":"90","line":34,"column":9,"nodeType":"76","messageId":"77","endLine":34,"endColumn":54},"jest/no-try-expect",["91"],"lines-around-directive",["92"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'get' is defined but never used.","'set' is defined but never used.","'fib' is assigned a value but never used.","'schema' is assigned a value but never used.","'validate' is assigned a value but never used.","'setValues' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'validateForm' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'parser' is assigned a value but never used.","no-conditional-expect","padding-line-between-statements"]